
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://rdrvashvfvjdtuuuqjio.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJkcnZhc2h2ZnZqZHR1dXVxamlvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIzNDE2NzIsImV4cCI6MjA1NzkxNzY3Mn0.sP3DXiJwRaOnPWMhc8YNLkrIB16SZIXbp-jvG40hdY0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storageKey: 'vitalis-auth-token',
    detectSessionInUrl: false
  },
  global: {
    // Extended timeout for longer operations
    fetch: (url, options = {}) => {
      // @ts-ignore
      options.headers = options.headers || {};
      // Set longer timeout for large data operations
      const timeoutController = new AbortController();
      const timeoutId = setTimeout(() => timeoutController.abort(), 120000); // 2 minutes timeout
      
      // @ts-ignore
      options.signal = timeoutController.signal;
      
      return fetch(url, options).finally(() => clearTimeout(timeoutId));
    }
  }
});

// Simple helper to check if there's a valid session in storage
export const hasStoredSession = () => {
  try {
    const storageKey = 'vitalis-auth-token';
    const stored = localStorage.getItem(storageKey);
    if (!stored) return false;
    
    const parsedData = JSON.parse(stored);
    if (!parsedData?.currentSession) return false;
    
    const expiryTime = parsedData.currentSession.expires_at * 1000;
    // Add a 5-minute buffer to be safe
    const bufferTime = 5 * 60 * 1000; 
    return new Date(expiryTime - bufferTime) > new Date();
  } catch (error) {
    console.error('Error checking stored session:', error);
    return false;
  }
};

// Helper to get current token with validation
export const getCurrentToken = async () => {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    if (session?.access_token) {
      // Verify token expiration
      const now = Math.floor(Date.now() / 1000);
      // Add a 5-minute buffer to be safe
      const bufferTime = 5 * 60;
      if (session.expires_at && (session.expires_at - bufferTime) > now) {
        return session.access_token;
      }
      
      // Token expired or close to expiring, try to refresh
      console.log('Token expired or close to expiring, refreshing...');
      const { data } = await supabase.auth.refreshSession();
      return data.session?.access_token;
    }
    return null;
  } catch (error) {
    console.error('Error getting current token:', error);
    return null;
  }
};
