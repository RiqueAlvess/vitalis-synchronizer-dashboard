
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://rdrvashvfvjdtuuuqjio.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJkcnZhc2h2ZnZqZHR1dXVxamlvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIzNDE2NzIsImV4cCI6MjA1NzkxNzY3Mn0.sP3DXiJwRaOnPWMhc8YNLkrIB16SZIXbp-jvG40hdY0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storageKey: 'vitalis-auth-token',
    detectSessionInUrl: false
  }
});

// Helper to check if there's a valid session in storage with proper error handling
export const hasStoredSession = () => {
  try {
    const storageKey = 'vitalis-auth-token';
    const stored = localStorage.getItem(storageKey);
    if (!stored) return false;
    
    try {
      const parsedData = JSON.parse(stored);
      if (!parsedData?.currentSession) return false;
      
      // Se não tiver expiresAt, considere válido por 1 hora
      if (!parsedData.currentSession.expires_at) {
        if (parsedData.currentSession.created_at) {
          const createdAt = new Date(parsedData.currentSession.created_at * 1000);
          const oneHourLater = new Date(createdAt.getTime() + 60 * 60 * 1000);
          return oneHourLater > new Date();
        }
        return false; // Se não tiver created_at, não consideramos válido
      }
      
      return new Date(parsedData.currentSession.expires_at * 1000) > new Date();
    } catch (parseError) {
      console.error('Error parsing stored session:', parseError);
      return false;
    }
  } catch (error) {
    console.error('Error checking stored session:', error);
    return false;
  }
};
