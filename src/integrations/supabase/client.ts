
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://rdrvashvfvjdtuuuqjio.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJkcnZhc2h2ZnZqZHR1dXVxamlvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIzNDE2NzIsImV4cCI6MjA1NzkxNzY3Mn0.sP3DXiJwRaOnPWMhc8YNLkrIB16SZIXbp-jvG40hdY0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storageKey: 'vitalis-auth-token',
    detectSessionInUrl: false, // Disable session detection in URL to avoid redirection issues
    flowType: 'implicit'
  }
});

// Helper to check if there's a valid session in storage with proper error handling
export const hasStoredSession = () => {
  try {
    const storageKey = 'vitalis-auth-token';
    const stored = localStorage.getItem(storageKey);
    if (!stored) return false;
    
    const parsedData = JSON.parse(stored);
    // Check if current session exists and hasn't expired
    if (!parsedData?.currentSession?.expires_at) return false;
    
    const expiresAt = new Date(parsedData.currentSession.expires_at * 1000);
    const hasValidSession = expiresAt > new Date();
    
    // If session is close to expiration (within 5 minutes), consider it invalid
    // to trigger a refresh
    if (hasValidSession) {
      const fiveMinutesFromNow = new Date(Date.now() + 5 * 60 * 1000);
      if (expiresAt < fiveMinutesFromNow) {
        console.log('Session is close to expiration, should refresh');
        return true; // Still return true but will trigger refresh soon
      }
    }
    
    return hasValidSession;
  } catch (error) {
    console.error('Error checking stored session:', error);
    return false;
  }
};
